{"version":3,"sources":["fileinput.js","Estimator.js","App.js","serviceWorker.js","index.js"],"names":["FileInput","props","document","body","ondragover","ev","preventDefault","stopPropagation","ondrop","handleDrop","bind","dataTransfer","items","length","this","parseFile","getAsFile","files","e","target","file","reader","FileReader","onload","rows","result","trim","split","onChange","readAsText","type","handleUpload","React","Component","Estimator","state","uniStats","states","map","r","includes","console","error","txt","al","ak","az","ar","ca","co","ct","de","fl","ga","hi","id","il","in","ia","ks","ky","la","me","mh","md","ma","mi","mn","ms","mo","mt","ne","nv","nh","nj","nm","ny","nc","nd","oh","ok","or","pa","pr","ri","sc","sd","tn","tx","ut","vt","va","wa","dc","wv","wi","wy","toLowerCase","filter","isNaN","input_df","DataFrame","log","show","stats","sum","students","lines","forEach","i","push","key","name","positivity","positives","toFixed","className","fileUploaded","approxPositiveStudents","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.548c3146.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class FileInput extends React.Component {\n  constructor(props) {\n    super(props)\n\n    document.body.ondragover = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n    };\n    document.body.ondrop = this.handleDrop.bind(this);\n  }\n\n  handleDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (ev.dataTransfer.items && ev.dataTransfer.items.length) {\n      this.parseFile(ev.dataTransfer.items[0].getAsFile());\n    } else if (ev.dataTransfer.files && ev.dataTransfer.files.length) {\n      this.parseFile(ev.dataTransfer.files[0].getAsFile());\n    }\n  }\n\n  handleUpload(e) {\n    this.parseFile(e.target.files[0]);\n  }\n\n  parseFile(file) {\n    let reader = new FileReader();\n    reader.onload = (e) => {\n        let tblob = e.target.result,\n            rows = tblob.trim().split(/\\r\\n|\\r|\\n/)\n        this.props.onChange(rows)\n    };\n    reader.readAsText(file);\n  }\n\n  render() {\n    return <div>\n      <input\n        type=\"file\"\n        onChange={this.handleUpload.bind(this)}\n      />\n    </div>\n  }\n}\n","import React from 'react';\nimport DataFrame from \"dataframe-js\";\n\nimport FileInput from './fileinput';\n\nfunction lowerState(txt) {\n  txt = txt.trim();\n  if (txt.length === 2) {\n      txt = ({\n        al: \"Alabama\",\n        ak: \"Alaska\",\n        az: \"Arizona\",\n        ar: \"Arkansas\",\n        ca: \"California\",\n        co: \"Colorado\",\n        ct: \"Connecticut\",\n        de: \"Delaware\",\n        fl: \"Florida\",\n        ga: \"Georgia\",\n        hi: \"Hawaii\",\n        id: \"Idaho\",\n        il: \"Illinois\",\n        in: \"Indiana\",\n        ia: \"Iowa\",\n        ks: \"Kansas\",\n        ky: \"Kentucky\",\n        la: \"Louisiana\",\n        me: \"Maine\",\n        mh: \"Marshall Islands\",\n        md: \"Maryland\",\n        ma: \"Massachusetts\",\n        mi: \"Michigan\",\n        mn: \"Minnesota\",\n        ms: \"Mississippi\",\n        mo: \"Missouri\",\n        mt: \"Montana\",\n        ne: \"Nebraska\",\n        nv: \"Nevada\",\n        nh: \"New Hampshire\",\n        nj: \"New Jersey\",\n        nm: \"New Mexico\",\n        ny: \"New York\",\n        nc: \"North Carolina\",\n        nd: \"North Dakota\",\n        oh: \"Ohio\",\n        ok: \"Oklahoma\",\n        or: \"Oregon\",\n        pa: \"Pennsylvania\",\n        pr: \"Puerto Rico\",\n        ri: \"Rhode Island\",\n        sc: \"South Carolina\",\n        sd: \"South Dakota\",\n        tn: \"Tennessee\",\n        tx: \"Texas\",\n        ut: \"Utah\",\n        vt: \"Vermont\",\n        va: \"Virginia\",\n        wa: \"Washington\",\n        dc: \"District of Columbia\",\n        wv: \"West Virginia\",\n        wi: \"Wisconsin\",\n        wy: \"Wyoming\"\n      })[txt.toLowerCase()]\n  }\n  return txt.toLowerCase();\n}\n\nexport default class Estimator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uniStats: []\n    }\n  }\n\n  fileUploaded(rows) {\n    let states = rows.map((r) => {\n      if (r.includes(\"\\t\")) {\n        r = r.split(\"\\t\")\n      } else if (r.includes(\",\")) {\n        r = r.split(\",\")\n      } else {\n        console.error(\"row did not include tab or comma?\")\n        return null\n      }\n      return [lowerState(r[0]), 1 * r[1]];\n    }).filter(r => !isNaN(r[1]));\n\n    let input_df = new DataFrame(states, [\"state\", \"students\"]);\n    console.log(input_df.show(3));\n\n    //\n    // [\n    //   { state: \"New Hampshire\", students: 5, positivity: ?, positiveStudents: ? }\n    // ]\n    //\n    // this.setState({\n    //   uniStats: data\n    // })\n  }\n\n  approxPositiveStudents() {\n    let stats = this.state.uniStats,\n        sum = 0,\n        students = 0,\n        lines = [];\n\n    stats.forEach((state, i) => {\n      lines.push(<tr key={i}>\n        <td>{state.name}</td>\n        <td>{state.positivity}</td>\n        <td>{state.students}</td>\n        <td>{state.positives.toFixed(2)}</td>\n      </tr>)\n      students += state.students * 1;\n      sum += state.positives * 1;\n    })\n\n    lines.push(<tr key=\"total\">\n      <td><strong>Total</strong></td>\n      <td></td>\n      <td>{students}</td>\n      <td>Approximately<br/>{sum.toFixed(2)}</td>\n    </tr>)\n\n    return lines;\n  }\n\n  render() {\n    return <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <FileInput\n            onChange={this.fileUploaded.bind(this)}\n            />\n        </div>\n\n        <div className=\"col-sm-12\">\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>State</th>\n                <th>Positive Rate</th>\n                <th>Arriving Students</th>\n                <th>Positives</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.approxPositiveStudents()}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  }\n}\n","import React from 'react';\nimport Estimator from './Estimator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Estimator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}