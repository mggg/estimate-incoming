{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.string.replace\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sqlParser;\n\nvar _reusables = require(\"../../reusables\");\n\nvar _errors = require(\"../../errors\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar REPLACMENTS = [[\"INNER JOIN\", \"INNERJOIN\"], [\"LEFT JOIN\", \"LEFTJOIN\"], [\"RIGHT JOIN\", \"RIGHTJOIN\"], [\"FULL JOIN\", \"FULLJOIN\"], [\"GROUP BY\", \"GROUPBY\"]];\nvar WHERE_OPERATORS = {\n  IN: function IN(a, b) {\n    return b.includes(a);\n  },\n  LIKE: function LIKE(a, b) {\n    return b.includes(a) || a.includes(b);\n  },\n  \">=\": function _(a, b) {\n    return a >= b;\n  },\n  \"<=\": function _(a, b) {\n    return a <= b;\n  },\n  \"!=\": function _(a, b) {\n    return a !== b;\n  },\n  \"<\": function _(a, b) {\n    return a < b;\n  },\n  \">\": function _(a, b) {\n    return a > b;\n  },\n  \"=\": function _(a, b) {\n    return a === b;\n  },\n  AND: function AND(a, b) {\n    return a && b;\n  },\n  OR: function OR(a, b) {\n    return a || b;\n  }\n};\nvar SELECT_FUNCTIONS = {\n  COUNT: function COUNT(df) {\n    return df.count();\n  },\n  SUM: function SUM(df, column) {\n    return df.stat.sum(column);\n  },\n  MAX: function MAX(df, column) {\n    return df.stat.max(column);\n  },\n  MIN: function MIN(df, column) {\n    return df.stat.min(column);\n  },\n  AVG: function AVG(df, column) {\n    return df.stat.mean(column);\n  }\n};\n\nfunction match(value) {\n  for (var _len = arguments.length, cases = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    cases[_key - 1] = arguments[_key];\n  }\n\n  var casesGen = (0, _reusables.makeGenerator)(cases);\n\n  var checker = function checker(nextCase) {\n    return nextCase[0](value) ? nextCase[1](value) : checker(casesGen.next().value);\n  };\n\n  return checker(casesGen.next().value);\n}\n\nfunction sqlArgsToArray(args) {\n  return (0, _reusables.xReplace)(args.join(\" \"), [\" \", \"\"]).split(\",\");\n}\n\nfunction joinHandler(operation, tables, type) {\n  var ONKeywordLocation = operation.findIndex(function (word) {\n    return word.toUpperCase() === \"ON\";\n  }) + 1;\n  return function (df) {\n    return df.join(tables[operation[0]], sqlArgsToArray(operation.filter(function (word, loc) {\n      return loc >= ONKeywordLocation;\n    })), type);\n  };\n}\n\nvar OPERATIONS_HANDLER = {\n  WHERE: function WHERE(operation) {\n    var operationalTerms = (0, _reusables.xSplit)(operation.join(\" \"), \" AND \", \" OR \");\n    return function (df) {\n      return df.filter(function (row) {\n        var conditionalOperators = operation.filter(function (term) {\n          return [\"AND\", \"OR\"].includes(term.toUpperCase());\n        });\n        return operationalTerms.map(function (operationalTerm) {\n          var operatorToApply = _reusables.xContains.apply(void 0, [operationalTerm].concat(_toConsumableArray(Object.keys(WHERE_OPERATORS))))[0];\n\n          var terms = operationalTerm.split(operatorToApply).map(function (term) {\n            return term.trim();\n          });\n\n          if (!row.has(terms[0]) && row.has(terms[1])) {\n            return WHERE_OPERATORS[operatorToApply]((0, _reusables.xReplace)(terms[0].trim(), ['\"', \"\"], [\"'\", \"\"], [\"`\", \"\"]), String(row.get(terms[1])));\n          }\n\n          var lastTermAsNumber = Number(terms[1]);\n          return WHERE_OPERATORS[operatorToApply](String(row.get(terms[0])), Number.isNaN(lastTermAsNumber) ? (0, _reusables.xReplace)(terms[1].trim(), ['\"', \"\"], [\"'\", \"\"], [\"`\", \"\"]) : lastTermAsNumber);\n        }).reduce(function (prev, next) {\n          return WHERE_OPERATORS[conditionalOperators.shift()](prev, next);\n        });\n      });\n    };\n  },\n  JOIN: function JOIN(operation, tables) {\n    return joinHandler(operation, tables, \"inner\");\n  },\n  INNERJOIN: function INNERJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"inner\");\n  },\n  LEFTJOIN: function LEFTJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"left\");\n  },\n  RIGHTJOIN: function RIGHTJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"right\");\n  },\n  FULLJOIN: function FULLJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"full\");\n  },\n  UNION: function UNION(operation, tables) {\n    return function (df) {\n      return df.union(operation[0].toUpperCase().includes(\"SELECT\") ? sqlParser(operation.join(\" \"), tables) : tables[operation[0]]);\n    };\n  },\n  GROUPBY: function GROUPBY(operation) {\n    return function (df) {\n      return df.groupBy.apply(df, _toConsumableArray(sqlArgsToArray(operation)));\n    };\n  }\n};\n\nfunction replaceTermsInQuery(query) {\n  var replacedQuery = query;\n  REPLACMENTS.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        joinType = _ref2[0],\n        replacment = _ref2[1];\n\n    replacedQuery = replacedQuery.replace(joinType, replacment).replace(joinType.toLowerCase(), replacment);\n  });\n  return replacedQuery;\n}\n\nfunction sqlSplitter(query) {\n  var splittedQuery = replaceTermsInQuery(query).split(\" \");\n  var fromLoc = splittedQuery.findIndex(function (word) {\n    return word.toUpperCase() === \"FROM\";\n  });\n\n  if (fromLoc === -1) {\n    throw new _errors.SQLParseError(\"Your query should contains FROM keyword\");\n  }\n\n  return {\n    selections: splittedQuery.slice(0, fromLoc),\n    table: splittedQuery[fromLoc + 1],\n    operations: splittedQuery.slice(fromLoc + 2, splittedQuery.length)\n  };\n}\n\nfunction parseOperations(operations, tables) {\n  var operationsLoc = operations.map(function (word, index) {\n    return Object.keys(OPERATIONS_HANDLER).includes(word.toUpperCase()) ? index : undefined;\n  }).filter(function (loc) {\n    return loc !== undefined;\n  });\n  return operationsLoc.map(function (loc, index) {\n    return OPERATIONS_HANDLER[operations[loc].toUpperCase()](operations.slice(loc + 1, operationsLoc[index + 1] ? operationsLoc[index + 1] : operations.length), tables);\n  }).reduce(function (prev, next) {\n    return function (df) {\n      return next(prev(df));\n    };\n  }, function (df) {\n    return df;\n  });\n}\n\nfunction parseSelections(selections) {\n  if (selections[0].toUpperCase() !== \"SELECT\") {\n    throw new _errors.SQLParseError(\"Your query should begin with SELECT keyword\");\n  }\n\n  selections.shift();\n  return match(selections.join(\" \").split(\",\").map(function (selection) {\n    return selection.trim();\n  }), [function (value) {\n    return (0, _reusables.xReplace)(value[0], [\" \", \"\"]) === \"*\";\n  }, function () {\n    return function (df) {\n      return df;\n    };\n  }], [function (value) {\n    return value[0].toUpperCase().includes(\"DISTINCT\");\n  }, function (value) {\n    var columnName = (0, _reusables.xReplace)(value[0].split(\" AS \")[0], [\"DISTINCT\", \"\"], [\"distinct\", \"\"], [\" \", \"\"]);\n    return function (df) {\n      return df.distinct(columnName).rename(columnName, value[0].includes(\"AS\") ? value[0].split(\"AS\")[1].replace(\" \", \"\") : columnName);\n    };\n  }], [function (value) {\n    return _reusables.xContains.apply(void 0, [value[0].toUpperCase()].concat(_toConsumableArray(Object.keys(SELECT_FUNCTIONS))))[0];\n  }, function (value) {\n    return function (df) {\n      var functionToApply = Object.keys(SELECT_FUNCTIONS).find(function (func) {\n        return value[0].toUpperCase().includes(func);\n      });\n\n      var applyFunction = function applyFunction(dfToImpact) {\n        return SELECT_FUNCTIONS[functionToApply](dfToImpact, (0, _reusables.xReplace)(value[0], [\"\".concat(functionToApply.toLowerCase(), \"(\"), \"\"], [\"\".concat(functionToApply, \"(\"), \"\"], [\"(\", \"\"], [\")\", \"\"]));\n      };\n\n      return df.on && df.df ? df.aggregate(applyFunction) : applyFunction(df);\n    };\n  }], [function () {\n    return true;\n  }, function (value) {\n    return function (df) {\n      return df.select.apply(df, _toConsumableArray(value.map(function (column) {\n        return column.split(\" AS \")[0].replace(\" \", \"\");\n      }))).renameAll(value.map(function (column) {\n        return column.includes(\"AS\") ? column.split(\"AS\")[1].replace(\" \", \"\") : column;\n      }));\n    };\n  }]);\n}\n\nfunction sqlParser(query, tables) {\n  var _sqlSplitter = sqlSplitter(query),\n      selections = _sqlSplitter.selections,\n      table = _sqlSplitter.table,\n      operations = _sqlSplitter.operations;\n\n  if (!table || !Object.keys(tables).includes(table)) {\n    throw new _errors.SQLParseError(\"Wrong table name in your query: \".concat(table));\n  }\n\n  var applyOperations = parseOperations(operations, tables);\n  var applySelections = parseSelections(selections);\n  return applySelections(applyOperations(tables[table]));\n}","map":{"version":3,"sources":["/Users/gabe/mggg/estimate-incoming/node_modules/dataframe-js/lib/modules/sql/sqlEngine.js"],"names":["require","Object","defineProperty","exports","value","default","sqlParser","_reusables","_errors","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","iter","prototype","toString","call","from","arr2","REPLACMENTS","WHERE_OPERATORS","IN","a","b","includes","LIKE","_","AND","OR","SELECT_FUNCTIONS","COUNT","df","count","SUM","column","stat","sum","MAX","max","MIN","min","AVG","mean","match","_len","arguments","cases","_key","casesGen","makeGenerator","checker","nextCase","sqlArgsToArray","args","xReplace","join","split","joinHandler","operation","tables","type","ONKeywordLocation","findIndex","word","toUpperCase","filter","loc","OPERATIONS_HANDLER","WHERE","operationalTerms","xSplit","row","conditionalOperators","term","map","operationalTerm","operatorToApply","xContains","apply","concat","keys","terms","trim","has","String","get","lastTermAsNumber","Number","isNaN","reduce","prev","shift","JOIN","INNERJOIN","LEFTJOIN","RIGHTJOIN","FULLJOIN","UNION","union","GROUPBY","groupBy","replaceTermsInQuery","query","replacedQuery","forEach","_ref","_ref2","joinType","replacment","replace","toLowerCase","sqlSplitter","splittedQuery","fromLoc","SQLParseError","selections","slice","table","operations","parseOperations","operationsLoc","index","parseSelections","selection","columnName","distinct","rename","functionToApply","find","func","applyFunction","dfToImpact","on","aggregate","select","renameAll","_sqlSplitter","applyOperations","applySelections"],"mappings":"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","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.for-each\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.join\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.reduce\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.date.to-string\");\n\nrequire(\"core-js/modules/es.number.constructor\");\n\nrequire(\"core-js/modules/es.number.is-nan\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/es.string.trim\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sqlParser;\n\nvar _reusables = require(\"../../reusables\");\n\nvar _errors = require(\"../../errors\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar REPLACMENTS = [[\"INNER JOIN\", \"INNERJOIN\"], [\"LEFT JOIN\", \"LEFTJOIN\"], [\"RIGHT JOIN\", \"RIGHTJOIN\"], [\"FULL JOIN\", \"FULLJOIN\"], [\"GROUP BY\", \"GROUPBY\"]];\nvar WHERE_OPERATORS = {\n  IN: function IN(a, b) {\n    return b.includes(a);\n  },\n  LIKE: function LIKE(a, b) {\n    return b.includes(a) || a.includes(b);\n  },\n  \">=\": function _(a, b) {\n    return a >= b;\n  },\n  \"<=\": function _(a, b) {\n    return a <= b;\n  },\n  \"!=\": function _(a, b) {\n    return a !== b;\n  },\n  \"<\": function _(a, b) {\n    return a < b;\n  },\n  \">\": function _(a, b) {\n    return a > b;\n  },\n  \"=\": function _(a, b) {\n    return a === b;\n  },\n  AND: function AND(a, b) {\n    return a && b;\n  },\n  OR: function OR(a, b) {\n    return a || b;\n  }\n};\nvar SELECT_FUNCTIONS = {\n  COUNT: function COUNT(df) {\n    return df.count();\n  },\n  SUM: function SUM(df, column) {\n    return df.stat.sum(column);\n  },\n  MAX: function MAX(df, column) {\n    return df.stat.max(column);\n  },\n  MIN: function MIN(df, column) {\n    return df.stat.min(column);\n  },\n  AVG: function AVG(df, column) {\n    return df.stat.mean(column);\n  }\n};\n\nfunction match(value) {\n  for (var _len = arguments.length, cases = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    cases[_key - 1] = arguments[_key];\n  }\n\n  var casesGen = (0, _reusables.makeGenerator)(cases);\n\n  var checker = function checker(nextCase) {\n    return nextCase[0](value) ? nextCase[1](value) : checker(casesGen.next().value);\n  };\n\n  return checker(casesGen.next().value);\n}\n\nfunction sqlArgsToArray(args) {\n  return (0, _reusables.xReplace)(args.join(\" \"), [\" \", \"\"]).split(\",\");\n}\n\nfunction joinHandler(operation, tables, type) {\n  var ONKeywordLocation = operation.findIndex(function (word) {\n    return word.toUpperCase() === \"ON\";\n  }) + 1;\n  return function (df) {\n    return df.join(tables[operation[0]], sqlArgsToArray(operation.filter(function (word, loc) {\n      return loc >= ONKeywordLocation;\n    })), type);\n  };\n}\n\nvar OPERATIONS_HANDLER = {\n  WHERE: function WHERE(operation) {\n    var operationalTerms = (0, _reusables.xSplit)(operation.join(\" \"), \" AND \", \" OR \");\n    return function (df) {\n      return df.filter(function (row) {\n        var conditionalOperators = operation.filter(function (term) {\n          return [\"AND\", \"OR\"].includes(term.toUpperCase());\n        });\n        return operationalTerms.map(function (operationalTerm) {\n          var operatorToApply = _reusables.xContains.apply(void 0, [operationalTerm].concat(_toConsumableArray(Object.keys(WHERE_OPERATORS))))[0];\n\n          var terms = operationalTerm.split(operatorToApply).map(function (term) {\n            return term.trim();\n          });\n\n          if (!row.has(terms[0]) && row.has(terms[1])) {\n            return WHERE_OPERATORS[operatorToApply]((0, _reusables.xReplace)(terms[0].trim(), ['\"', \"\"], [\"'\", \"\"], [\"`\", \"\"]), String(row.get(terms[1])));\n          }\n\n          var lastTermAsNumber = Number(terms[1]);\n          return WHERE_OPERATORS[operatorToApply](String(row.get(terms[0])), Number.isNaN(lastTermAsNumber) ? (0, _reusables.xReplace)(terms[1].trim(), ['\"', \"\"], [\"'\", \"\"], [\"`\", \"\"]) : lastTermAsNumber);\n        }).reduce(function (prev, next) {\n          return WHERE_OPERATORS[conditionalOperators.shift()](prev, next);\n        });\n      });\n    };\n  },\n  JOIN: function JOIN(operation, tables) {\n    return joinHandler(operation, tables, \"inner\");\n  },\n  INNERJOIN: function INNERJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"inner\");\n  },\n  LEFTJOIN: function LEFTJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"left\");\n  },\n  RIGHTJOIN: function RIGHTJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"right\");\n  },\n  FULLJOIN: function FULLJOIN(operation, tables) {\n    return joinHandler(operation, tables, \"full\");\n  },\n  UNION: function UNION(operation, tables) {\n    return function (df) {\n      return df.union(operation[0].toUpperCase().includes(\"SELECT\") ? sqlParser(operation.join(\" \"), tables) : tables[operation[0]]);\n    };\n  },\n  GROUPBY: function GROUPBY(operation) {\n    return function (df) {\n      return df.groupBy.apply(df, _toConsumableArray(sqlArgsToArray(operation)));\n    };\n  }\n};\n\nfunction replaceTermsInQuery(query) {\n  var replacedQuery = query;\n  REPLACMENTS.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        joinType = _ref2[0],\n        replacment = _ref2[1];\n\n    replacedQuery = replacedQuery.replace(joinType, replacment).replace(joinType.toLowerCase(), replacment);\n  });\n  return replacedQuery;\n}\n\nfunction sqlSplitter(query) {\n  var splittedQuery = replaceTermsInQuery(query).split(\" \");\n  var fromLoc = splittedQuery.findIndex(function (word) {\n    return word.toUpperCase() === \"FROM\";\n  });\n\n  if (fromLoc === -1) {\n    throw new _errors.SQLParseError(\"Your query should contains FROM keyword\");\n  }\n\n  return {\n    selections: splittedQuery.slice(0, fromLoc),\n    table: splittedQuery[fromLoc + 1],\n    operations: splittedQuery.slice(fromLoc + 2, splittedQuery.length)\n  };\n}\n\nfunction parseOperations(operations, tables) {\n  var operationsLoc = operations.map(function (word, index) {\n    return Object.keys(OPERATIONS_HANDLER).includes(word.toUpperCase()) ? index : undefined;\n  }).filter(function (loc) {\n    return loc !== undefined;\n  });\n  return operationsLoc.map(function (loc, index) {\n    return OPERATIONS_HANDLER[operations[loc].toUpperCase()](operations.slice(loc + 1, operationsLoc[index + 1] ? operationsLoc[index + 1] : operations.length), tables);\n  }).reduce(function (prev, next) {\n    return function (df) {\n      return next(prev(df));\n    };\n  }, function (df) {\n    return df;\n  });\n}\n\nfunction parseSelections(selections) {\n  if (selections[0].toUpperCase() !== \"SELECT\") {\n    throw new _errors.SQLParseError(\"Your query should begin with SELECT keyword\");\n  }\n\n  selections.shift();\n  return match(selections.join(\" \").split(\",\").map(function (selection) {\n    return selection.trim();\n  }), [function (value) {\n    return (0, _reusables.xReplace)(value[0], [\" \", \"\"]) === \"*\";\n  }, function () {\n    return function (df) {\n      return df;\n    };\n  }], [function (value) {\n    return value[0].toUpperCase().includes(\"DISTINCT\");\n  }, function (value) {\n    var columnName = (0, _reusables.xReplace)(value[0].split(\" AS \")[0], [\"DISTINCT\", \"\"], [\"distinct\", \"\"], [\" \", \"\"]);\n    return function (df) {\n      return df.distinct(columnName).rename(columnName, value[0].includes(\"AS\") ? value[0].split(\"AS\")[1].replace(\" \", \"\") : columnName);\n    };\n  }], [function (value) {\n    return _reusables.xContains.apply(void 0, [value[0].toUpperCase()].concat(_toConsumableArray(Object.keys(SELECT_FUNCTIONS))))[0];\n  }, function (value) {\n    return function (df) {\n      var functionToApply = Object.keys(SELECT_FUNCTIONS).find(function (func) {\n        return value[0].toUpperCase().includes(func);\n      });\n\n      var applyFunction = function applyFunction(dfToImpact) {\n        return SELECT_FUNCTIONS[functionToApply](dfToImpact, (0, _reusables.xReplace)(value[0], [\"\".concat(functionToApply.toLowerCase(), \"(\"), \"\"], [\"\".concat(functionToApply, \"(\"), \"\"], [\"(\", \"\"], [\")\", \"\"]));\n      };\n\n      return df.on && df.df ? df.aggregate(applyFunction) : applyFunction(df);\n    };\n  }], [function () {\n    return true;\n  }, function (value) {\n    return function (df) {\n      return df.select.apply(df, _toConsumableArray(value.map(function (column) {\n        return column.split(\" AS \")[0].replace(\" \", \"\");\n      }))).renameAll(value.map(function (column) {\n        return column.includes(\"AS\") ? column.split(\"AS\")[1].replace(\" \", \"\") : column;\n      }));\n    };\n  }]);\n}\n\nfunction sqlParser(query, tables) {\n  var _sqlSplitter = sqlSplitter(query),\n      selections = _sqlSplitter.selections,\n      table = _sqlSplitter.table,\n      operations = _sqlSplitter.operations;\n\n  if (!table || !Object.keys(tables).includes(table)) {\n    throw new _errors.SQLParseError(\"Wrong table name in your query: \".concat(table));\n  }\n\n  var applyOperations = parseOperations(operations, tables);\n  var applySelections = parseSelections(selections);\n  return applySelections(applyOperations(tables[table]));\n}"]},"metadata":{},"sourceType":"script"}