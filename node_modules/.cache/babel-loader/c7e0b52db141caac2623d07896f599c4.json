{"ast":null,"code":"var _jsxFileName = \"/Users/gabe/mggg/estimate-incoming/src/fileinput.js\";\nimport React from 'react';\n\nconst d3 = require(\"d3\");\n\nexport default class FileInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    document.body.ondragover = ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    document.body.ondrop = this.handleDrop.bind(this);\n  }\n\n  handleDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this.props.startLoading();\n\n    if (ev.dataTransfer.items && ev.dataTransfer.items.length) {\n      this.parseFile(ev.dataTransfer.items[0].getAsFile());\n    } else if (ev.dataTransfer.files && ev.dataTransfer.files.length) {\n      this.parseFile(ev.dataTransfer.files[0].getAsFile());\n    }\n  }\n\n  handleUpload(e) {\n    this.props.startLoading();\n    this.parseFile(e.target.files[0]);\n  }\n\n  parseFile(file) {\n    let reader = new FileReader();\n\n    reader.onload = e => {\n      let tblob = e.target.result,\n          rows = d3.csvParseRows(tblob); // trim header\n\n      if (rows[0][0].toLowerCase().trim() === \"state\") {\n        rows.splice(0, 1);\n      }\n\n      this.props.onChange(rows);\n    };\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleUpload.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/gabe/mggg/estimate-incoming/src/fileinput.js"],"names":["React","d3","require","FileInput","Component","constructor","props","document","body","ondragover","ev","preventDefault","stopPropagation","ondrop","handleDrop","bind","startLoading","dataTransfer","items","length","parseFile","getAsFile","files","handleUpload","e","target","file","reader","FileReader","onload","tblob","result","rows","csvParseRows","toLowerCase","trim","splice","onChange","readAsText","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,eAAe,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AAEAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,UAAd,GAA4BC,EAAD,IAAQ;AAC/BA,MAAAA,EAAE,CAACC,cAAH;AACAD,MAAAA,EAAE,CAACE,eAAH;AACH,KAHD;;AAIAL,IAAAA,QAAQ,CAACC,IAAT,CAAcK,MAAd,GAAuB,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAvB;AACD;;AAEDD,EAAAA,UAAU,CAACJ,EAAD,EAAK;AACbA,IAAAA,EAAE,CAACC,cAAH;AACAD,IAAAA,EAAE,CAACE,eAAH;AACA,SAAKN,KAAL,CAAWU,YAAX;;AAEA,QAAIN,EAAE,CAACO,YAAH,CAAgBC,KAAhB,IAAyBR,EAAE,CAACO,YAAH,CAAgBC,KAAhB,CAAsBC,MAAnD,EAA2D;AACzD,WAAKC,SAAL,CAAeV,EAAE,CAACO,YAAH,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBG,SAAzB,EAAf;AACD,KAFD,MAEO,IAAIX,EAAE,CAACO,YAAH,CAAgBK,KAAhB,IAAyBZ,EAAE,CAACO,YAAH,CAAgBK,KAAhB,CAAsBH,MAAnD,EAA2D;AAChE,WAAKC,SAAL,CAAeV,EAAE,CAACO,YAAH,CAAgBK,KAAhB,CAAsB,CAAtB,EAAyBD,SAAzB,EAAf;AACD;AACF;;AAEDE,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,SAAKlB,KAAL,CAAWU,YAAX;AACA,SAAKI,SAAL,CAAeI,CAAC,CAACC,MAAF,CAASH,KAAT,CAAe,CAAf,CAAf;AACD;;AAEDF,EAAAA,SAAS,CAACM,IAAD,EAAO;AACd,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBL,CAAD,IAAO;AACnB,UAAIM,KAAK,GAAGN,CAAC,CAACC,MAAF,CAASM,MAArB;AAAA,UACIC,IAAI,GAAG/B,EAAE,CAACgC,YAAH,CAAgBH,KAAhB,CADX,CADmB,CAGnB;;AACA,UAAIE,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,EAAWE,WAAX,GAAyBC,IAAzB,OAAoC,OAAxC,EAAiD;AAC/CH,QAAAA,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAe,CAAf;AACD;;AACD,WAAK9B,KAAL,CAAW+B,QAAX,CAAoBL,IAApB;AACH,KARD;;AASAL,IAAAA,MAAM,CAACW,UAAP,CAAkBZ,IAAlB;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAE,KAAKhB,YAAL,CAAkBR,IAAlB,CAAuB,IAAvB,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,CAAP;AAMD;;AAjDoD","sourcesContent":["import React from 'react';\n\nconst d3 = require(\"d3\");\n\nexport default class FileInput extends React.Component {\n  constructor(props) {\n    super(props)\n\n    document.body.ondragover = (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n    };\n    document.body.ondrop = this.handleDrop.bind(this);\n  }\n\n  handleDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this.props.startLoading();\n\n    if (ev.dataTransfer.items && ev.dataTransfer.items.length) {\n      this.parseFile(ev.dataTransfer.items[0].getAsFile());\n    } else if (ev.dataTransfer.files && ev.dataTransfer.files.length) {\n      this.parseFile(ev.dataTransfer.files[0].getAsFile());\n    }\n  }\n\n  handleUpload(e) {\n    this.props.startLoading();\n    this.parseFile(e.target.files[0]);\n  }\n\n  parseFile(file) {\n    let reader = new FileReader();\n    reader.onload = (e) => {\n        let tblob = e.target.result,\n            rows = d3.csvParseRows(tblob);\n        // trim header\n        if (rows[0][0].toLowerCase().trim() === \"state\") {\n          rows.splice(0, 1);\n        }\n        this.props.onChange(rows);\n    };\n    reader.readAsText(file);\n  }\n\n  render() {\n    return <div>\n      <input\n        type=\"file\"\n        onChange={this.handleUpload.bind(this)}\n      />\n    </div>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}