{"ast":null,"code":"import _classCallCheck from\"/Users/gabe/mggg/estimate-incoming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/gabe/mggg/estimate-incoming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/gabe/mggg/estimate-incoming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/gabe/mggg/estimate-incoming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import DataFrame from\"dataframe-js\";import FileInput from'./fileinput';import LoadingGif from'./loading.gif';var d3=require(\"d3\");var postalCodeToName={al:\"Alabama\",ak:\"Alaska\",az:\"Arizona\",ar:\"Arkansas\",ca:\"California\",co:\"Colorado\",ct:\"Connecticut\",de:\"Delaware\",fl:\"Florida\",ga:\"Georgia\",hi:\"Hawaii\",id:\"Idaho\",il:\"Illinois\",in:\"Indiana\",ia:\"Iowa\",ks:\"Kansas\",ky:\"Kentucky\",la:\"Louisiana\",me:\"Maine\",mh:\"Marshall Islands\",md:\"Maryland\",ma:\"Massachusetts\",mi:\"Michigan\",mn:\"Minnesota\",ms:\"Mississippi\",mo:\"Missouri\",mt:\"Montana\",ne:\"Nebraska\",nv:\"Nevada\",nh:\"New Hampshire\",nj:\"New Jersey\",nm:\"New Mexico\",ny:\"New York\",nc:\"North Carolina\",nd:\"North Dakota\",oh:\"Ohio\",ok:\"Oklahoma\",or:\"Oregon\",pa:\"Pennsylvania\",pr:\"Puerto Rico\",ri:\"Rhode Island\",sc:\"South Carolina\",sd:\"South Dakota\",tn:\"Tennessee\",tx:\"Texas\",ut:\"Utah\",vt:\"Vermont\",va:\"Virginia\",wa:\"Washington\",dc:\"District of Columbia\",wv:\"West Virginia\",wi:\"Wisconsin\",wy:\"Wyoming\"};var df=null;function lowerState(txt){txt=txt.trim();if(txt.length===2){txt=postalCodeToName[txt.toLowerCase()];}return txt.toLowerCase();}function parsedDate(date){var dd=String(date.getDate()).padStart(2,'0'),mm=String(date.getMonth()+1).padStart(2,'0'),yyyy=date.getFullYear(),str=yyyy+'-'+mm+'-'+dd;return str;};var Estimator=/*#__PURE__*/function(_React$Component){_inherits(Estimator,_React$Component);var _super=_createSuper(Estimator);function Estimator(props){var _this;_classCallCheck(this,Estimator);_this=_super.call(this,props);_this.state={uniStats:[],loading:true,sortMode:0};return _this;}_createClass(Estimator,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;d3.csv('/estimate-incoming/infections_data.csv').then(function(rows){// console.log(rows);\nrows.forEach(function(r){return r.location_name=r.location_name.toLowerCase().replace(\"georgia_two\",\"georgia\");});df=new DataFrame(rows,[\"date_reported\",\"location_name\",\"location_population\",\"mean_admis\",\"mean_deaths\",\"mean_infections\",\"upper_admis\",\"upper_deaths\",\"upper_infections\",\"lower_admis\",\"lower_deaths\",\"lower_infections\",\"cum_deaths\",\"seroprevalence_mean\",\"seroprevalence_upper\",\"seroprevalence_lower\",\"admis_mean_per_cap\",\"admis_upper_per_cap\",\"admis_lower_per_cap\",\"deaths_mean_per_cap\",\"deaths_upper_per_cap\",\"deaths_lower_per_cap\"]);// infections_data.show(3);\nfetch(\"/estimate-incoming/students.csv\").then(function(res){return res.text();}).then(function(data){var rows=d3.csvParseRows(data);rows.splice(0,1);_this2.fileUploaded(rows);});});}},{key:\"startLoading\",value:function startLoading(){this.setState({loading:true});}},{key:\"fileUploaded\",value:function fileUploaded(rows){var states=rows.map(function(r){return[lowerState(r[0]),1*r[1]];}),days=[];for(var i=5;i<22;i++){var date=new Date();date.setDate(date.getDate()-i);var dateString=parsedDate(date);days.push(dateString);}// input: [ [name, students] ]\nstates.forEach(function(state){var ourState=df.filter({'location_name':state[0]});var popState=ourState.stat.mean('location_population');var data=ourState.filter({'date_reported':days[0]});for(var i=1;i<days.length;i++){data=data.union(ourState.filter({'date_reported':days[i]}));}var pastInfections=data;var currentPositives=pastInfections.stat.sum('mean_infections');var probPositive=currentPositives/popState;state.push(probPositive);});// output: [[ name, students, fraction_prob_positive ]]\nthis.setState({uniStats:states,loading:false});}},{key:\"sort\",value:function sort(sortMode){this.setState({sortMode:sortMode});}},{key:\"approxPositiveStudents\",value:function approxPositiveStudents(){var states=this.state.uniStats,sum=0,allStudents=0,estStudents=0,matchedStates=0,lines=[];// default sort is A-Z\nif(this.state.sortMode===1){// sort by positivity\nstates=states.sort(function(a,b){return b[2]-a[2];});}else if(this.state.sortMode===2){states=states.sort(function(a,b){return b[2]*b[1]-a[2]*a[1];});}else if(this.state.sortMode===0){states=states.sort();}states.forEach(function(state,i){lines.push(/*#__PURE__*/React.createElement(\"tr\",{key:i},/*#__PURE__*/React.createElement(\"td\",null,state[0]),/*#__PURE__*/React.createElement(\"td\",null,(state[2]*100).toFixed(2),\"%\"),/*#__PURE__*/React.createElement(\"td\",null,state[1].toLocaleString()),/*#__PURE__*/React.createElement(\"td\",null,(state[1]*state[2]).toFixed(2))));allStudents+=state[1]*1;if(!isNaN(state[2])){estStudents+=state[1]*1;sum+=state[1]*state[2];matchedStates++;}});if(allStudents){lines.push(/*#__PURE__*/React.createElement(\"tr\",{key:\"total\"},/*#__PURE__*/React.createElement(\"td\",{colSpan:\"2\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Total - \"),/*#__PURE__*/React.createElement(\"br\",null),\"File included \",matchedStates,\"/51 (states + DC)\"),/*#__PURE__*/React.createElement(\"td\",null,estStudents.toLocaleString(),\" \",/*#__PURE__*/React.createElement(\"br\",null),\"Matched \",Math.round(estStudents/allStudents*100),\"% of students\"),/*#__PURE__*/React.createElement(\"td\",null,sum.toFixed(2),/*#__PURE__*/React.createElement(\"br\",null),\"Estimated\")));}return lines;}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-12\"},/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:\"center\"}},/*#__PURE__*/React.createElement(\"nav\",{className:\"navbar navbar-dark bg-primary\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Estimate Arriving Cases\")),/*#__PURE__*/React.createElement(\"section\",{className:\"qSection\"},/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:'left',padding:'10px'}},/*#__PURE__*/React.createElement(\"strong\",null,\"This is a calculator to help university leadership estimate how many students will immediately test positive for COVID-19 as they arrive on campus in the Fall of 2020.\"),\" We use data from Dr. Abraham Flaxman at the University of Washington that estimates the number of daily infections in each state, along with university-specific data on where students are coming from. Our intention is to help universities start planning their testing rollout as quickly and as accurately as possible. This calculator is a project of the MGGG Redistricting Lab (\",/*#__PURE__*/React.createElement(\"a\",{href:\"https://mggg.org\",target:\"_blank\"},\"mggg.org\"),\") at Tisch College of Tufts University.  For information, contact\\xA0\",/*#__PURE__*/React.createElement(\"a\",{href:\"mailto:Moon.Duchin@tufts.edu\"},\"Moon.Duchin@tufts.edu\"),\".\"),/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:'left',padding:'10px'}},/*#__PURE__*/React.createElement(\"strong\",null,\"How to use this calculator:\"),\"\\xA0 Upload a .csv file (formatted as below) that contains the number of students from each state, and the calculator will handle the rest.\"))),/*#__PURE__*/React.createElement(\"hr\",{id:\"separator\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-3\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Create CSV\"),\"It should have this format\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"code\",null,\"state,students\",/*#__PURE__*/React.createElement(\"br\",null),\"AK,2\",/*#__PURE__*/React.createElement(\"br\",null),\"AL,4\",/*#__PURE__*/React.createElement(\"br\",null),\"AR,3\",/*#__PURE__*/React.createElement(\"br\",null),\"...\")),/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Process File\"),\"Drag and drop the CSV file onto this webpage, or choose it here.\",/*#__PURE__*/React.createElement(\"br\",null),\"It is read locally and not uploaded.\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-6 offset-3\",style:{border:\"1px solid #ccc\",padding:6}},/*#__PURE__*/React.createElement(FileInput,{onChange:this.fileUploaded.bind(this),startLoading:this.startLoading.bind(this)}))),/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-3\"},this.state.loading?/*#__PURE__*/React.createElement(\"img\",{src:LoadingGif,alt:\"Loading spinner\"}):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-info\",onClick:function onClick(e){return _this3.sort(0);}},\"Sort A->Z\"),/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-info\",onClick:function onClick(e){return _this3.sort(1);}},\"Sort by State %\"),/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-info\",onClick:function onClick(e){return _this3.sort(2);}},\"Sort by Positives\")))),/*#__PURE__*/React.createElement(\"hr\",{id:\"separator\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm-12\"},/*#__PURE__*/React.createElement(\"table\",{className:\"table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"State\"),/*#__PURE__*/React.createElement(\"th\",null,\"Positive Rate\"),/*#__PURE__*/React.createElement(\"th\",null,\"Arriving Students\"),/*#__PURE__*/React.createElement(\"th\",null,\"Positives\"))),/*#__PURE__*/React.createElement(\"tbody\",null,this.approxPositiveStudents()))))));}}]);return Estimator;}(React.Component);export{Estimator as default};","map":{"version":3,"sources":["/Users/gabe/mggg/estimate-incoming/src/Estimator.js"],"names":["React","DataFrame","FileInput","LoadingGif","d3","require","postalCodeToName","al","ak","az","ar","ca","co","ct","de","fl","ga","hi","id","il","in","ia","ks","ky","la","me","mh","md","ma","mi","mn","ms","mo","mt","ne","nv","nh","nj","nm","ny","nc","nd","oh","ok","or","pa","pr","ri","sc","sd","tn","tx","ut","vt","va","wa","dc","wv","wi","wy","df","lowerState","txt","trim","length","toLowerCase","parsedDate","date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","str","Estimator","props","state","uniStats","loading","sortMode","csv","then","rows","forEach","r","location_name","replace","fetch","res","text","data","csvParseRows","splice","fileUploaded","setState","states","map","days","i","Date","setDate","dateString","push","ourState","filter","popState","stat","mean","union","pastInfections","currentPositives","sum","probPositive","allStudents","estStudents","matchedStates","lines","sort","a","b","toFixed","toLocaleString","isNaN","Math","round","textAlign","padding","border","bind","startLoading","e","approxPositiveStudents","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DataFrame from \"dataframe-js\";\n\nimport FileInput from './fileinput';\nimport LoadingGif from './loading.gif';\n\nconst d3 = require(\"d3\");\nconst postalCodeToName = {\n  al: \"Alabama\",\n  ak: \"Alaska\",\n  az: \"Arizona\",\n  ar: \"Arkansas\",\n  ca: \"California\",\n  co: \"Colorado\",\n  ct: \"Connecticut\",\n  de: \"Delaware\",\n  fl: \"Florida\",\n  ga: \"Georgia\",\n  hi: \"Hawaii\",\n  id: \"Idaho\",\n  il: \"Illinois\",\n  in: \"Indiana\",\n  ia: \"Iowa\",\n  ks: \"Kansas\",\n  ky: \"Kentucky\",\n  la: \"Louisiana\",\n  me: \"Maine\",\n  mh: \"Marshall Islands\",\n  md: \"Maryland\",\n  ma: \"Massachusetts\",\n  mi: \"Michigan\",\n  mn: \"Minnesota\",\n  ms: \"Mississippi\",\n  mo: \"Missouri\",\n  mt: \"Montana\",\n  ne: \"Nebraska\",\n  nv: \"Nevada\",\n  nh: \"New Hampshire\",\n  nj: \"New Jersey\",\n  nm: \"New Mexico\",\n  ny: \"New York\",\n  nc: \"North Carolina\",\n  nd: \"North Dakota\",\n  oh: \"Ohio\",\n  ok: \"Oklahoma\",\n  or: \"Oregon\",\n  pa: \"Pennsylvania\",\n  pr: \"Puerto Rico\",\n  ri: \"Rhode Island\",\n  sc: \"South Carolina\",\n  sd: \"South Dakota\",\n  tn: \"Tennessee\",\n  tx: \"Texas\",\n  ut: \"Utah\",\n  vt: \"Vermont\",\n  va: \"Virginia\",\n  wa: \"Washington\",\n  dc: \"District of Columbia\",\n  wv: \"West Virginia\",\n  wi: \"Wisconsin\",\n  wy: \"Wyoming\"\n};\n\nlet df = null;\n\nfunction lowerState(txt) {\n  txt = txt.trim();\n  if (txt.length === 2) {\n      txt = postalCodeToName[txt.toLowerCase()]\n  }\n  return txt.toLowerCase();\n}\n\nfunction parsedDate(date) {\n  let dd = String(date.getDate()).padStart(2, '0'),\n      mm = String(date.getMonth() + 1).padStart(2, '0'),\n      yyyy = date.getFullYear(),\n      str = yyyy + '-' + mm + '-' + dd;\n  return str;\n};\n\nexport default class Estimator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uniStats: [],\n      loading: true,\n      sortMode: 0\n    }\n  }\n\n  componentDidMount() {\n    d3.csv('/estimate-incoming/infections_data.csv').then(rows => {\n      // console.log(rows);\n      rows.forEach(r => r.location_name = r.location_name.toLowerCase().replace(\"georgia_two\", \"georgia\"))\n      df = new DataFrame(rows, [\n        \"date_reported\",\"location_name\",\"location_population\",\"mean_admis\",\"mean_deaths\",\n        \"mean_infections\",\"upper_admis\",\"upper_deaths\",\"upper_infections\",\"lower_admis\",\n        \"lower_deaths\",\"lower_infections\",\"cum_deaths\",\"seroprevalence_mean\",\n        \"seroprevalence_upper\",\"seroprevalence_lower\",\"admis_mean_per_cap\",\"admis_upper_per_cap\",\n        \"admis_lower_per_cap\",\"deaths_mean_per_cap\",\"deaths_upper_per_cap\",\"deaths_lower_per_cap\"]);\n      // infections_data.show(3);\n\n      fetch(\"/estimate-incoming/students.csv\").then(res => res.text()).then(data => {\n        let rows = d3.csvParseRows(data);\n        rows.splice(0, 1);\n        this.fileUploaded(rows);\n      });\n    });\n  }\n\n  startLoading() {\n    this.setState({ loading: true })\n  }\n\n  fileUploaded(rows) {\n    let states = rows.map((r) => [lowerState(r[0]), 1 * r[1]]),\n        days = [];\n    for (var i = 5; i<22; i++) {\n      var date = new Date();\n      date.setDate(date.getDate() - i);\n      let dateString = parsedDate(date);\n      days.push(dateString);\n    }\n\n    // input: [ [name, students] ]\n\n    states.forEach(state => {\n      let ourState = df.filter({'location_name':state[0]});\n      let popState = ourState.stat.mean('location_population');\n      let data = ourState.filter({'date_reported':days[0]});\n      for (var i = 1; i < days.length; i++) {\n        data = data.union(ourState.filter({'date_reported':days[i]}))\n      }\n      let pastInfections = data;\n      let currentPositives = pastInfections.stat.sum('mean_infections');\n      let probPositive = currentPositives / popState;\n      state.push(probPositive);\n    });\n\n    // output: [[ name, students, fraction_prob_positive ]]\n\n    this.setState({\n      uniStats: states,\n      loading: false\n    })\n  }\n\n  sort(sortMode) {\n    this.setState({ sortMode: sortMode })\n  }\n\n  approxPositiveStudents() {\n    let states = this.state.uniStats,\n        sum = 0,\n        allStudents = 0,\n        estStudents = 0,\n        matchedStates = 0,\n        lines = [];\n\n    // default sort is A-Z\n    if (this.state.sortMode === 1) {\n      // sort by positivity\n      states = states.sort((a, b) => b[2] - a[2])\n    } else if (this.state.sortMode === 2) {\n      states = states.sort((a, b) => b[2] * b[1] - a[2] * a[1])\n    } else if (this.state.sortMode === 0) {\n      states = states.sort()\n    }\n\n    states.forEach((state, i) => {\n      lines.push(<tr key={i}>\n        <td>{state[0]}</td>\n        <td>{(state[2]*100).toFixed(2)}%</td>\n        <td>{state[1].toLocaleString()}</td>\n        <td>{(state[1] * state[2]).toFixed(2)}</td>\n      </tr>)\n      allStudents += state[1] * 1;\n      if (!isNaN(state[2])) {\n        estStudents += state[1] * 1;\n        sum += state[1] * state[2];\n        matchedStates++;\n      }\n    })\n\n    if (allStudents) {\n      lines.push(<tr key=\"total\">\n        <td colSpan=\"2\">\n          <strong>Total - </strong>\n          <br/>\n          File included {matchedStates}/51 (states + DC)\n        </td>\n        <td>\n          {estStudents.toLocaleString()} <br/>\n          Matched {Math.round(estStudents/allStudents*100)}% of students\n        </td>\n        <td>{sum.toFixed(2)}<br/>Estimated</td>\n      </tr>)\n    }\n\n    return lines;\n  }\n\n  render() {\n    return <div className=\"container\">\n      <div className=\"col-sm-12\">\n        <div style={{textAlign:\"center\"}}>\n          <nav className=\"navbar navbar-dark bg-primary\">\n            <h2>Estimate Arriving Cases</h2>\n          </nav>\n          <section className=\"qSection\">\n            <p style={{textAlign: 'left', padding: '10px'}}>\n              <strong>This is a calculator to help university leadership estimate how many students will immediately test positive for COVID-19 as they arrive on campus in the Fall of 2020.</strong> We use data from Dr. Abraham Flaxman at the University of Washington that estimates the number of daily infections in each state, along with university-specific data on where students are coming from. Our intention is to help universities start planning their testing rollout as quickly and as accurately as possible. This calculator is a project of the MGGG Redistricting Lab\n              (<a href=\"https://mggg.org\" target=\"_blank\">mggg.org</a>)\n              at Tisch College of Tufts University.  For information, contact&nbsp;\n              <a href=\"mailto:Moon.Duchin@tufts.edu\">Moon.Duchin@tufts.edu</a>.\n            </p>\n            <p style={{textAlign: 'left', padding: '10px'}}>\n              <strong>How to use this calculator:</strong>&nbsp;\n              Upload a .csv file (formatted as below) that contains the number of students from each state, and the calculator will handle the rest.\n            </p>\n          </section>\n        </div>\n        \n        <hr id=\"separator\"/>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <h3>Create CSV</h3>\n            It should have this format<br/>\n              <code>\n              state,students<br/>\n              AK,2<br/>\n              AL,4<br/>\n              AR,3<br/>\n              ...\n              </code>\n          </div>\n          <div className=\"col-sm-6\">\n            <h3>Process File</h3>\n            Drag and drop the CSV file onto this webpage, or\n            choose it here.<br/>\n            It is read locally and not uploaded.\n            <br/>\n            <div className=\"col-sm-6 offset-3\" style={{border:\"1px solid #ccc\", padding: 6}}>\n              <FileInput\n                onChange={this.fileUploaded.bind(this)}\n                startLoading={this.startLoading.bind(this)}\n                />\n            </div>\n          </div>\n\n          <div className=\"col-sm-3\">\n            {this.state.loading\n              ? <img src={LoadingGif} alt=\"Loading spinner\"/>\n              : <div>\n                <button className=\"btn btn-info\" onClick={e => this.sort(0)}>Sort A->Z</button>\n                <button className=\"btn btn-info\" onClick={e => this.sort(1)}>Sort by State %</button>\n                <button className=\"btn btn-info\" onClick={e => this.sort(2)}>Sort by Positives</button>\n              </div>}\n          </div>\n        </div>\n\n        <hr id=\"separator\"/>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>State</th>\n                  <th>Positive Rate</th>\n                  <th>Arriving Students</th>\n                  <th>Positives</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.approxPositiveStudents()}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}