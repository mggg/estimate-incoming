{"ast":null,"code":"var _jsxFileName = \"/Users/gabe/mggg/estimate-incoming/src/Estimator.js\";\nimport React from 'react';\nimport DataFrame from \"dataframe-js\";\nimport FileInput from './fileinput';\nimport LoadingGif from './loading.gif';\n\nconst d3 = require(\"d3\");\n\nconst postalCodeToName = {\n  al: \"Alabama\",\n  ak: \"Alaska\",\n  az: \"Arizona\",\n  ar: \"Arkansas\",\n  ca: \"California\",\n  co: \"Colorado\",\n  ct: \"Connecticut\",\n  de: \"Delaware\",\n  fl: \"Florida\",\n  ga: \"Georgia\",\n  hi: \"Hawaii\",\n  id: \"Idaho\",\n  il: \"Illinois\",\n  in: \"Indiana\",\n  ia: \"Iowa\",\n  ks: \"Kansas\",\n  ky: \"Kentucky\",\n  la: \"Louisiana\",\n  me: \"Maine\",\n  mh: \"Marshall Islands\",\n  md: \"Maryland\",\n  ma: \"Massachusetts\",\n  mi: \"Michigan\",\n  mn: \"Minnesota\",\n  ms: \"Mississippi\",\n  mo: \"Missouri\",\n  mt: \"Montana\",\n  ne: \"Nebraska\",\n  nv: \"Nevada\",\n  nh: \"New Hampshire\",\n  nj: \"New Jersey\",\n  nm: \"New Mexico\",\n  ny: \"New York\",\n  nc: \"North Carolina\",\n  nd: \"North Dakota\",\n  oh: \"Ohio\",\n  ok: \"Oklahoma\",\n  or: \"Oregon\",\n  pa: \"Pennsylvania\",\n  pr: \"Puerto Rico\",\n  ri: \"Rhode Island\",\n  sc: \"South Carolina\",\n  sd: \"South Dakota\",\n  tn: \"Tennessee\",\n  tx: \"Texas\",\n  ut: \"Utah\",\n  vt: \"Vermont\",\n  va: \"Virginia\",\n  wa: \"Washington\",\n  dc: \"District of Columbia\",\n  wv: \"West Virginia\",\n  wi: \"Wisconsin\",\n  wy: \"Wyoming\"\n};\nlet df = null;\n\nfunction lowerState(txt) {\n  txt = txt.trim();\n\n  if (txt.length === 2) {\n    txt = postalCodeToName[txt.toLowerCase()];\n  }\n\n  return txt.toLowerCase();\n}\n\nfunction parsedDate(date) {\n  let dd = String(date.getDate()).padStart(2, '0'),\n      mm = String(date.getMonth() + 1).padStart(2, '0'),\n      yyyy = date.getFullYear(),\n      str = yyyy + '-' + mm + '-' + dd;\n  return str;\n}\n\n;\nexport default class Estimator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uniStats: [],\n      loading: true,\n      sortMode: 0\n    };\n  }\n\n  componentDidMount() {\n    d3.csv('/estimate-incoming/infections_data.csv').then(rows => {\n      // console.log(rows);\n      rows.forEach(r => r.location_name = r.location_name.toLowerCase().replace(\"georgia_two\", \"georgia\"));\n      df = new DataFrame(rows, [\"date_reported\", \"location_name\", \"location_population\", \"mean_admis\", \"mean_deaths\", \"mean_infections\", \"upper_admis\", \"upper_deaths\", \"upper_infections\", \"lower_admis\", \"lower_deaths\", \"lower_infections\", \"cum_deaths\", \"seroprevalence_mean\", \"seroprevalence_upper\", \"seroprevalence_lower\", \"admis_mean_per_cap\", \"admis_upper_per_cap\", \"admis_lower_per_cap\", \"deaths_mean_per_cap\", \"deaths_upper_per_cap\", \"deaths_lower_per_cap\"]); // infections_data.show(3);\n\n      fetch(\"/estimate-incoming/students.csv\").then(res => res.text()).then(data => {\n        let rows = d3.csvParseRows(data);\n        rows.splice(0, 1);\n        this.fileUploaded(rows);\n      });\n    });\n  }\n\n  startLoading() {\n    this.setState({\n      loading: true\n    });\n  }\n\n  fileUploaded(rows) {\n    let states = rows.map(r => [lowerState(r[0]), 1 * r[1]]),\n        days = [];\n\n    for (var i = 5; i < 22; i++) {\n      var date = new Date();\n      date.setDate(date.getDate() - i);\n      let dateString = parsedDate(date);\n      days.push(dateString);\n    } // input: [ [name, students] ]\n\n\n    states.forEach(state => {\n      let ourState = df.filter({\n        'location_name': state[0]\n      });\n      let popState = ourState.stat.mean('location_population');\n      let data = ourState.filter({\n        'date_reported': days[0]\n      });\n\n      for (var i = 1; i < days.length; i++) {\n        data = data.union(ourState.filter({\n          'date_reported': days[i]\n        }));\n      }\n\n      let pastInfections = data;\n      let currentPositives = pastInfections.stat.sum('mean_infections');\n      let probPositive = currentPositives / popState;\n      state.push(probPositive);\n    }); // output: [[ name, students, fraction_prob_positive ]]\n\n    this.setState({\n      uniStats: states,\n      loading: false\n    });\n  }\n\n  sort(sortMode) {\n    this.setState({\n      sortMode: sortMode\n    });\n  }\n\n  approxPositiveStudents() {\n    let states = this.state.uniStats,\n        sum = 0,\n        allStudents = 0,\n        estStudents = 0,\n        matchedStates = 0,\n        lines = []; // default sort is A-Z\n\n    if (this.state.sortMode === 1) {\n      // sort by positivity\n      states = states.sort((a, b) => b[2] - a[2]);\n    } else if (this.state.sortMode === 2) {\n      states = states.sort((a, b) => b[2] * b[1] - a[2] * a[1]);\n    } else if (this.state.sortMode === 0) {\n      states = states.sort();\n    }\n\n    states.forEach((state, i) => {\n      lines.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, state[0]), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, (state[2] * 100).toFixed(2), \"%\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }\n      }, state[1].toLocaleString()), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      }, (state[1] * state[2]).toFixed(2))));\n      allStudents += state[1] * 1;\n\n      if (!isNaN(state[2])) {\n        estStudents += state[1] * 1;\n        sum += state[1] * state[2];\n        matchedStates++;\n      }\n    });\n\n    if (allStudents) {\n      lines.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"total\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, \"Total - \"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }\n      }), \"File included \", matchedStates, \"/51 (states + DC)\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, estStudents.toLocaleString(), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 42\n        }\n      }), \"Matched \", Math.round(estStudents / allStudents * 100), \"% of students\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }\n      }, sum.toFixed(2), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }\n      }), \"Estimated\")));\n    }\n\n    return lines;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-dark bg-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, \"Estimate Arriving Cases\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"qSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'left',\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }, \"This is a calculator to help university leadership estimate how many students will immediately test positive for COVID-19 as they arrive on campus in the Fall of 2020.\"), \" We use data from Dr. Abraham Flaxman at the University of Washington that estimates the number of daily infections in each state, along with university-specific data on where students are coming from. Our intention is to help universities start planning their testing rollout as quickly and as accurately as possible. This calculator is a project of the MGGG Redistricting Lab (\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://mggg.org\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 16\n      }\n    }, \"mggg.org\"), \") at Tisch College of Tufts University.  For information, contact\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"mailto:Moon.Duchin@tufts.edu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }\n    }, \"Moon.Duchin@tufts.edu\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'left',\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }, \"How to use this calculator:\"), \"\\xA0 Upload a .csv file (formatted as below) that contains the number of students from each state, and the calculator will handle the rest.\"))), /*#__PURE__*/React.createElement(\"hr\", {\n      id: \"separator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, \"Create CSV\"), \"It should have this format\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }, \"state,students\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 29\n      }\n    }), \"AK,2\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 19\n      }\n    }), \"AL,4\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }\n    }), \"AR,3\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 19\n      }\n    }), \"...\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, \"Process File\"), \"Drag and drop the CSV file onto this webpage, or choose it here.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 28\n      }\n    }), \"It is read locally and not uploaded.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: \"1px solid #ccc\",\n        padding: 6\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FileInput, {\n      onChange: this.fileUploaded.bind(this),\n      startLoading: this.startLoading.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }\n    }, this.state.loading ? /*#__PURE__*/React.createElement(\"img\", {\n      src: LoadingGif,\n      alt: \"Loading spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: e => this.sort(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, \"Sort A->Z\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: e => this.sort(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, \"Sort by State %\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: e => this.sort(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }, \"Sort by Positives\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 19\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }, \"Positive Rate\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 19\n      }\n    }, \"Arriving Students\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 19\n      }\n    }, \"Positives\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 15\n      }\n    }, this.approxPositiveStudents()))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/gabe/mggg/estimate-incoming/src/Estimator.js"],"names":["React","DataFrame","FileInput","LoadingGif","d3","require","postalCodeToName","al","ak","az","ar","ca","co","ct","de","fl","ga","hi","id","il","in","ia","ks","ky","la","me","mh","md","ma","mi","mn","ms","mo","mt","ne","nv","nh","nj","nm","ny","nc","nd","oh","ok","or","pa","pr","ri","sc","sd","tn","tx","ut","vt","va","wa","dc","wv","wi","wy","df","lowerState","txt","trim","length","toLowerCase","parsedDate","date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","str","Estimator","Component","constructor","props","state","uniStats","loading","sortMode","componentDidMount","csv","then","rows","forEach","r","location_name","replace","fetch","res","text","data","csvParseRows","splice","fileUploaded","startLoading","setState","states","map","days","i","Date","setDate","dateString","push","ourState","filter","popState","stat","mean","union","pastInfections","currentPositives","sum","probPositive","sort","approxPositiveStudents","allStudents","estStudents","matchedStates","lines","a","b","toFixed","toLocaleString","isNaN","Math","round","render","textAlign","padding","border","bind","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DataFrame from \"dataframe-js\";\n\nimport FileInput from './fileinput';\nimport LoadingGif from './loading.gif';\n\nconst d3 = require(\"d3\");\nconst postalCodeToName = {\n  al: \"Alabama\",\n  ak: \"Alaska\",\n  az: \"Arizona\",\n  ar: \"Arkansas\",\n  ca: \"California\",\n  co: \"Colorado\",\n  ct: \"Connecticut\",\n  de: \"Delaware\",\n  fl: \"Florida\",\n  ga: \"Georgia\",\n  hi: \"Hawaii\",\n  id: \"Idaho\",\n  il: \"Illinois\",\n  in: \"Indiana\",\n  ia: \"Iowa\",\n  ks: \"Kansas\",\n  ky: \"Kentucky\",\n  la: \"Louisiana\",\n  me: \"Maine\",\n  mh: \"Marshall Islands\",\n  md: \"Maryland\",\n  ma: \"Massachusetts\",\n  mi: \"Michigan\",\n  mn: \"Minnesota\",\n  ms: \"Mississippi\",\n  mo: \"Missouri\",\n  mt: \"Montana\",\n  ne: \"Nebraska\",\n  nv: \"Nevada\",\n  nh: \"New Hampshire\",\n  nj: \"New Jersey\",\n  nm: \"New Mexico\",\n  ny: \"New York\",\n  nc: \"North Carolina\",\n  nd: \"North Dakota\",\n  oh: \"Ohio\",\n  ok: \"Oklahoma\",\n  or: \"Oregon\",\n  pa: \"Pennsylvania\",\n  pr: \"Puerto Rico\",\n  ri: \"Rhode Island\",\n  sc: \"South Carolina\",\n  sd: \"South Dakota\",\n  tn: \"Tennessee\",\n  tx: \"Texas\",\n  ut: \"Utah\",\n  vt: \"Vermont\",\n  va: \"Virginia\",\n  wa: \"Washington\",\n  dc: \"District of Columbia\",\n  wv: \"West Virginia\",\n  wi: \"Wisconsin\",\n  wy: \"Wyoming\"\n};\n\nlet df = null;\n\nfunction lowerState(txt) {\n  txt = txt.trim();\n  if (txt.length === 2) {\n      txt = postalCodeToName[txt.toLowerCase()]\n  }\n  return txt.toLowerCase();\n}\n\nfunction parsedDate(date) {\n  let dd = String(date.getDate()).padStart(2, '0'),\n      mm = String(date.getMonth() + 1).padStart(2, '0'),\n      yyyy = date.getFullYear(),\n      str = yyyy + '-' + mm + '-' + dd;\n  return str;\n};\n\nexport default class Estimator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uniStats: [],\n      loading: true,\n      sortMode: 0\n    }\n  }\n\n  componentDidMount() {\n    d3.csv('/estimate-incoming/infections_data.csv').then(rows => {\n      // console.log(rows);\n      rows.forEach(r => r.location_name = r.location_name.toLowerCase().replace(\"georgia_two\", \"georgia\"))\n      df = new DataFrame(rows, [\n        \"date_reported\",\"location_name\",\"location_population\",\"mean_admis\",\"mean_deaths\",\n        \"mean_infections\",\"upper_admis\",\"upper_deaths\",\"upper_infections\",\"lower_admis\",\n        \"lower_deaths\",\"lower_infections\",\"cum_deaths\",\"seroprevalence_mean\",\n        \"seroprevalence_upper\",\"seroprevalence_lower\",\"admis_mean_per_cap\",\"admis_upper_per_cap\",\n        \"admis_lower_per_cap\",\"deaths_mean_per_cap\",\"deaths_upper_per_cap\",\"deaths_lower_per_cap\"]);\n      // infections_data.show(3);\n\n      fetch(\"/estimate-incoming/students.csv\").then(res => res.text()).then(data => {\n        let rows = d3.csvParseRows(data);\n        rows.splice(0, 1);\n        this.fileUploaded(rows);\n      });\n    });\n  }\n\n  startLoading() {\n    this.setState({ loading: true })\n  }\n\n  fileUploaded(rows) {\n    let states = rows.map((r) => [lowerState(r[0]), 1 * r[1]]),\n        days = [];\n    for (var i = 5; i<22; i++) {\n      var date = new Date();\n      date.setDate(date.getDate() - i);\n      let dateString = parsedDate(date);\n      days.push(dateString);\n    }\n\n    // input: [ [name, students] ]\n\n    states.forEach(state => {\n      let ourState = df.filter({'location_name':state[0]});\n      let popState = ourState.stat.mean('location_population');\n      let data = ourState.filter({'date_reported':days[0]});\n      for (var i = 1; i < days.length; i++) {\n        data = data.union(ourState.filter({'date_reported':days[i]}))\n      }\n      let pastInfections = data;\n      let currentPositives = pastInfections.stat.sum('mean_infections');\n      let probPositive = currentPositives / popState;\n      state.push(probPositive);\n    });\n\n    // output: [[ name, students, fraction_prob_positive ]]\n\n    this.setState({\n      uniStats: states,\n      loading: false\n    })\n  }\n\n  sort(sortMode) {\n    this.setState({ sortMode: sortMode })\n  }\n\n  approxPositiveStudents() {\n    let states = this.state.uniStats,\n        sum = 0,\n        allStudents = 0,\n        estStudents = 0,\n        matchedStates = 0,\n        lines = [];\n\n    // default sort is A-Z\n    if (this.state.sortMode === 1) {\n      // sort by positivity\n      states = states.sort((a, b) => b[2] - a[2])\n    } else if (this.state.sortMode === 2) {\n      states = states.sort((a, b) => b[2] * b[1] - a[2] * a[1])\n    } else if (this.state.sortMode === 0) {\n      states = states.sort()\n    }\n\n    states.forEach((state, i) => {\n      lines.push(<tr key={i}>\n        <td>{state[0]}</td>\n        <td>{(state[2]*100).toFixed(2)}%</td>\n        <td>{state[1].toLocaleString()}</td>\n        <td>{(state[1] * state[2]).toFixed(2)}</td>\n      </tr>)\n      allStudents += state[1] * 1;\n      if (!isNaN(state[2])) {\n        estStudents += state[1] * 1;\n        sum += state[1] * state[2];\n        matchedStates++;\n      }\n    })\n\n    if (allStudents) {\n      lines.push(<tr key=\"total\">\n        <td colSpan=\"2\">\n          <strong>Total - </strong>\n          <br/>\n          File included {matchedStates}/51 (states + DC)\n        </td>\n        <td>\n          {estStudents.toLocaleString()} <br/>\n          Matched {Math.round(estStudents/allStudents*100)}% of students\n        </td>\n        <td>{sum.toFixed(2)}<br/>Estimated</td>\n      </tr>)\n    }\n\n    return lines;\n  }\n\n  render() {\n    return <div className=\"container\">\n      <div className=\"col-sm-12\">\n        <div style={{textAlign:\"center\"}}>\n          <nav className=\"navbar navbar-dark bg-primary\">\n            <h2>Estimate Arriving Cases</h2>\n          </nav>\n          <section className=\"qSection\">\n            <p style={{textAlign: 'left', padding: '10px'}}>\n              <strong>This is a calculator to help university leadership estimate how many students will immediately test positive for COVID-19 as they arrive on campus in the Fall of 2020.</strong> We use data from Dr. Abraham Flaxman at the University of Washington that estimates the number of daily infections in each state, along with university-specific data on where students are coming from. Our intention is to help universities start planning their testing rollout as quickly and as accurately as possible. This calculator is a project of the MGGG Redistricting Lab\n              (<a href=\"https://mggg.org\" target=\"_blank\">mggg.org</a>)\n              at Tisch College of Tufts University.  For information, contact&nbsp;\n              <a href=\"mailto:Moon.Duchin@tufts.edu\">Moon.Duchin@tufts.edu</a>.\n            </p>\n            <p style={{textAlign: 'left', padding: '10px'}}>\n              <strong>How to use this calculator:</strong>&nbsp;\n              Upload a .csv file (formatted as below) that contains the number of students from each state, and the calculator will handle the rest.\n            </p>\n          </section>\n        </div>\n        <hr id=\"separator\"/>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <h3>Create CSV</h3>\n            It should have this format<br/>\n              <code>\n              state,students<br/>\n              AK,2<br/>\n              AL,4<br/>\n              AR,3<br/>\n              ...\n              </code>\n          </div>\n          <div className=\"col-sm-3\">\n            <h3>Process File</h3>\n            Drag and drop the CSV file onto this webpage, or\n            choose it here.<br/>\n            It is read locally and not uploaded.\n            <br/>\n            <div style={{border:\"1px solid #ccc\", padding: 6}}>\n              <FileInput\n                onChange={this.fileUploaded.bind(this)}\n                startLoading={this.startLoading.bind(this)}\n                />\n            </div>\n          </div>\n\n          <div className=\"col-sm-4\">\n            {this.state.loading\n              ? <img src={LoadingGif} alt=\"Loading spinner\"/>\n              : <div>\n                <button className=\"btn btn-info\" onClick={e => this.sort(0)}>Sort A->Z</button>\n                <button className=\"btn btn-info\" onClick={e => this.sort(1)}>Sort by State %</button>\n                <button className=\"btn btn-info\" onClick={e => this.sort(2)}>Sort by Positives</button>\n              </div>}\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>State</th>\n                  <th>Positive Rate</th>\n                  <th>Arriving Students</th>\n                  <th>Positives</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.approxPositiveStudents()}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}